version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy frontend
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            
jobs:
  build-frontend:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
             cd frontend
            # npm install  !!!!!!!!!!!!!!!!!!!! just for faster deployments
            # npm run test
                
  test-backend:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
             cd backend
            # npm install  !!!!!!!!!!!!!!!!!!!! just for faster deployments
            # npm run test
            
  analyze-frontend:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end build
          command: |
             cd frontend
             npm audit fix --audit-level=critical --force

  analyze-backend:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - run:
          name: Deploy backend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: deploy frontend
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values='udapeople' \
              --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment  
  
  configure-infrastructure:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["58:08:c1:dc:0c:42:47:47:88:cc:d8:90:a3:95:14:94"]
      - attach_workspace:
          at: ~/
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml -vvv
      - destroy-environment 

  run-migrations:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run: cat backend/migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 9193554c-fc6e-4701-be40-85335fa888fb" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment   
      # - revert_migrations

  deploy-frontend:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values='udapeople' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment  

  deploy-backend:
    docker:
      - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["58:08:c1:dc:0c:42:47:47:88:cc:d8:90:a3:95:14:94"]
      - attach_workspace:
          at: ~/
      - run: ls -la
      - run: cat .circleci/ansible/inventory.txt
      # dependencies are already installed on the docker image
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            pwd
            ls -la
            echo "Start deployment job by ansible"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    #  - image: tr3mo89/udacity-project4:1.0.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              python3 \
              py3-pip \
              curl \
              nodejs \
              npm \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values='udapeople' \
              --output text)
            echo $BACKEND_IP
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values='udapeople' \
              --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0 
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-central-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      #- destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - analyze-frontend:
          requires: [build-frontend]
      - analyze-backend:
          requires: [build-backend]   
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, analyze-frontend, analyze-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]